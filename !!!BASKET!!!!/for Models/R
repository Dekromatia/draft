import React, { useEffect, useRef } from 'react';
import { observer } from 'mobx-react-lite';
import StampStore from './StampStore';
import { loadModel } from './loadModel';

const stamp = new StampStore();

const MyComponent = observer(() => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const fetchData = async () => {
      await stamp.fetchModels();
      const selectedModel = stamp.selectedModel;
      if (selectedModel && selectedModel.modelLink) {
        const engine = new BABYLON.Engine(canvasRef.current, true);
        const scene = new BABYLON.Scene(engine);
        const camera = new BABYLON.ArcRotateCamera(
          'camera',
          -Math.PI / 2,
          Math.PI / 2,
          5,
          BABYLON.Vector3.Zero(),
          scene
        );
        camera.attachControl(canvasRef.current);
        const light = new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0, 1, 0), scene);

        const mesh = await loadModel(scene, selectedModel.modelLink, stamp);

        const animate = () => {
          scene.render();
        };
        engine.runRenderLoop(animate);

        return () => {
          engine.dispose();
        };
      }
    };
    fetchData();
  }, []);

  return <canvas ref={canvasRef} style={{ width: '100%', height: '100%' }} />;
});

export default MyComponent;